# Nagios Service Definitions.
#
# Automatically generated by Chef.

define service {
    use                 default-service
    host_name           *
    service_description ping
    check_command       check_ping!200.0,20%!500.0,60%
}

# monitoring service checks
<% unless @service_hosts['nagios-server'].nil? -%>
define service {
    service_description Nagios
    hostgroup_name      nagios-server
    check_command       check-nagios
    contact_groups      admins
    use                 default-service
}
<% end -%>

# default checks for all hosts
define service {
    service_description Chef Client
    hostgroup_name      all
    check_command    	check_chef_client
    use                 default-service
}

define service {
    service_description Free Space All Disks
    hostgroup_name      all
    check_command    	check_all_disks
    use                 default-service
}

define service {
    service_description Load Average
    hostgroup_name      all
    check_command       check_load
    use                 default-service
}

define service {
    service_description Free Memory
    hostgroup_name      all
    check_command    	check_mem
    use                 default-service
}

define service {
    service_description SSH
    hostgroup_name      all
    check_command       check_ssh
    use                 default-service
}

define service {
    service_description Local Processes
    hostgroup_name      all
    check_command       check_local_procs
    use                 default-service
}

define service {
    service_description Zombie Processes
    hostgroup_name      all
    check_command       check_zombie_procs
    use                 default-service
}

<% unless @service_hosts['ganglia-client'].nil? and @service_hosts['ganglia-server'].nil? -%>
define service {
    service_description Ganglia
    hostgroup_name      all
    check_command       check_gmond
    use                 default-service
}
<% end -%>

define service {
    service_description Check local ntp daemon
    hostgroup_name      all
    check_command       check_local_time
    use                 default-service
}

define service {
    service_description Check ntp server daemon
    hostgroup_name      all
    check_command       check_ntp
    use                 default-service
}

define service {
    service_description Check SWAP level
    hostgroup_name      all
    check_command       check_swap
    use                 default-service
}

<% if @platforms.member?("ubuntu") %>
define service {
    service_description Check APT update state
    hostgroup_name      ubuntu
    check_command       check_apt
    use                 default-service
}
<% end %>

define service {
    service_description Check DNS Resolver
    hostgroup_name      all
    check_command       remote_check_dns
    use                 default-service
}

<% unless @service_hosts['ganglia-server'].nil? -%>
define service {
    service_description GMetad
    hostgroup_name      ganglia-server
    check_command       check_gmetad
    use                 default-service
}

define service {
    service_description Ganglia Web 
    hostgroup_name      ganglia-server
    check_command       check_ganglia_web
    use                 default-service
}
<% end -%>
<% unless @service_hosts['provisioner-server'].nil? -%>
# These are the services to watch on an admin node
define service {
    service_description Crowbar Web Server
    hostgroup_name      provisioner-server
    check_command       check_tcp!80
    use                 default-service
}
define service {
    service_description Install Web Server
    hostgroup_name      provisioner-server
    check_command       check_http_port!8091
    use                 default-service
}
#define service {
#    service_description DHCP Server
#    hostgroup_name      provisioner-server
#    check_command       check_dhcp
#    use                 default-service
#}
<% end -%>

<% unless @service_hosts['nova-single-machine'].nil? -%>
# These are the services to watch on a nova-single-machine
#define service {
#    service_description Single Nova API
#    hostgroup_name      nova-single-machine
#    check_command       check_nova_api
#    use                 default-service
#}
#define service {
#    service_description Single Nova Scheduler
#    hostgroup_name      nova-single-machine
#    check_command       check_nova_scheduler
#    use                 default-service
#}
#define service {
#    service_description Single Nova Network
#    hostgroup_name      nova-single-machine
#    check_command       check_nova_network
#    use                 default-service
#}
#define service {
#    service_description Single Nova Compute
#    hostgroup_name      nova-single-machine
#    check_command       check_nova_compute
#    use                 default-service
#}
#define service {
#    service_description Single Nova Volume
#    hostgroup_name      nova-single-machine
#    check_command       check_nova_volume
#    use                 default-service
#}
define service {
    service_description Single Nova System
    hostgroup_name      nova-single-machine
    check_command       check_nova_manage
    use                 default-service
}
#define service {
#    service_description Single Nova Mysql
#    hostgroup_name      nova-single-machine
#    check_command       check_nova_mysql
#    use                 default-service
#}
#define service {
#    service_description Single Nova RabbitMQ
#    hostgroup_name      nova-single-machine
#    check_command       check_nova_rabbit
#    use                 default-service
#}
# Until needed
#define service {
#    service_description Single Nova LDAP
#    hostgroup_name      nova-single-machine
#    check_command       check_nova_ldap
#    use                 default-service
#}
<% end -%>

<% unless @service_hosts['nova-multi-controller'].nil? -%>
# Commenting out check_nova_manage as nova-manage command now relies
# on keystone for authenication -- will revisit in Mesa 1.7
#define service {
#    service_description Multi Nova System
#    hostgroup_name      nova-multi-controller
#    check_command       check_nova_manage
#    use                 default-service
#}
<% end -%>

#<% unless @service_hosts['nova-multi-compute'].nil? -%>
# These are the services to watch on a nova-multi-compute
#define service {
#    service_description Multi Nova Compute
#    hostgroup_name      nova-multi-compute
#    check_command       check_nova_compute
#    use                 default-service
#}
#<% end -%>

#### Services to watch for swift-compoents
<% if !@service_hosts['swift-proxy'].nil? or !@service_hosts['swift-proxy-acct'].nil? then  %>

# check the proxy
define service {
    service_description swift proxy process
    hostgroup_name      swift-proxy
    check_command       check_swift-proxy
    use                 default-service
}

<% %w{ object container }.each do |svc| %>
define service {
    service_description swift <%= svc%> process
    hostgroup_name      swift-storage
    check_command       check_swift-<%= svc%>
    use                 default-service
}

define service {
    service_description swift <%= svc%> replicator process
    hostgroup_name      swift-storage
    check_command       check_swift-<%= svc%>-replicator
    use                 default-service
}

define service {
    service_description swift <%= svc%> updater process
    hostgroup_name      swift-storage
    check_command       check_swift-<%= svc%>-updater
    use                 default-service
}

define service {
    service_description swift process <%= svc%> auditor 
    hostgroup_name      swift-storage
    check_command       check_swift-<%= svc%>-auditor
    use                 default-service
}

define service {
    service_description swift http port for <%= svc%> server
    hostgroup_name      swift-storage
    check_command       check_port_swift-<%= svc%>
    use                 default-service
}

<% end %>

define service {
    service_description swift http port for account server
	hostgroup_name      swift-storage
	check_command       check_port_swift-account
    use                 default-service
}

define service {
    service_description swift http port for proxy server
	hostgroup_name      swift-proxy
	check_command       check_port_swift-proxy
    use                 default-service
}


<% %w{swift-account swift-account-reaper swift-account-auditor swift-account-replicator}.each do |svc| %>
define service {
    service_description swift process <%= svc %>  
    hostgroup_name      swift-storage
    check_command       check_<%= svc %>
    use                 default-service
}
<% end %>

<% end ## end of swift-proxy present condition %>


<% unless @service_hosts['glance-server'].nil? then  %>
<% %w{glance-api glance-registry}.each do |svc| %>
define service {
    service_description Glance process <%= svc %>  
    hostgroup_name      glance-server
    check_command       check_<%= svc %>
    use                 default-service
}
define service {
    service_description Port check for <%= svc%> server
    hostgroup_name      glance-server
    check_command       check_port_<%= svc%>
    use                 default-service
}
<% end %>
<% end ## end of glance present condition %>

<% unless @service_hosts['keystone-server'].nil? then  %>
<% %w{keystone}.each do |svc| %>
#define service {
#    service_description Keystone process <%= svc %>  
#    hostgroup_name      keystone-server
#    check_command       check_<%= svc %>
#    use                 default-service
#}
<% end %>
<% %w{keystone-service keystone-admin}.each do |svc| %>
define service {
    service_description Port check for <%= svc%> server
    hostgroup_name      keystone-server
    check_command       check_port_<%= svc%>
    use                 default-service
}
<% end %>
<% end ## end of keystone present condition %>
